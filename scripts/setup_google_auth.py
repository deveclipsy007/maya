#!/usr/bin/env python3
"""
Script para configurar autentica√ß√£o Google OAuth2 para Maya HopeCann
Execute este script ap√≥s baixar o credentials.json do Google Cloud Console
"""

import os
import json
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import Flow
from google.oauth2.credentials import Credentials

# Configura√ß√µes
GOOGLE_CREDENTIALS_FILE = 'credentials.json'
GOOGLE_TOKEN_FILE = 'token.json'

def setup_google_auth():
    """
    Configura autentica√ß√£o Google OAuth2 para Google Meet/Calendar
    """
    print("üîê Configurando autentica√ß√£o Google para Maya HopeCann...")
    print("=" * 60)
    
    # Verificar se credentials.json existe
    if not os.path.exists(GOOGLE_CREDENTIALS_FILE):
        print("‚ùå Arquivo credentials.json n√£o encontrado!")
        print("\nüìã INSTRU√á√ïES PARA OBTER CREDENTIALS.JSON:")
        print("1. Acesse: https://console.cloud.google.com/")
        print("2. Crie um projeto ou selecione um existente")
        print("3. V√° para 'APIs e Servi√ßos' > 'Biblioteca'")
        print("4. Ative a 'Google Calendar API'")
        print("5. V√° para 'APIs e Servi√ßos' > 'Credenciais'")
        print("6. Clique em 'Criar Credenciais' > 'ID do cliente OAuth 2.0'")
        print("7. Escolha 'Aplicativo para computador'")
        print("8. Baixe o arquivo JSON e renomeie para 'credentials.json'")
        print("9. Coloque o arquivo na pasta do projeto Maya")
        print("10. Execute este script novamente")
        return False
    
    print("\n‚ö†Ô∏è IMPORTANTE - Para evitar erro 403 'access_denied':")
    print("1. Acesse: https://console.cloud.google.com/")
    print("2. V√° em 'APIs & Services' > 'OAuth consent screen'")
    print("3. OP√á√ÉO A: Adicione seu email em 'Test users'")
    print("4. OP√á√ÉO B: Clique em 'PUBLISH APP' (Recomendado)")
    print("5. Confirme que quer tornar a aplica√ß√£o p√∫blica")
    print("\nüîÑ Pressione ENTER para continuar ap√≥s fazer isso...")
    input()
    
    # Definir escopos necess√°rios
    SCOPES = [
        'https://www.googleapis.com/auth/calendar',
        'https://www.googleapis.com/auth/calendar.events'
    ]
    
    try:
        print("üöÄ Iniciando fluxo de autentica√ß√£o OAuth2...")
        
        # Criar fluxo OAuth com servidor local (substitui√ß√£o do OOB descontinuado)
        flow = Flow.from_client_secrets_file(
            GOOGLE_CREDENTIALS_FILE,
            SCOPES
        )
        
        # Configurar redirect URI para servidor local (n√£o mais OOB)
        flow.redirect_uri = 'http://localhost:8080'
        
        # Gerar URL de autoriza√ß√£o
        auth_url, _ = flow.authorization_url(
            access_type='offline',
            include_granted_scopes='true'
        )
        
        print(f"\nüåê Acesse este URL no seu navegador:")
        print(f"{auth_url}")
        print("\nüìù Ap√≥s autorizar, o Google vai redirecionar para localhost.")
        print("üîó Copie a URL completa da p√°gina de erro (que cont√©m o c√≥digo) e cole aqui:")
        print("Exemplo: http://localhost:8080/?code=4/0AX4XfWh...&scope=...")
        
        # Solicitar URL completa
        callback_url = input("\nURL completa do callback: ").strip()
        
        if not callback_url or 'code=' not in callback_url:
            print("‚ùå URL de callback inv√°lida ou n√£o cont√©m c√≥digo!")
            return False
        
        print("üîÑ Processando c√≥digo de autoriza√ß√£o...")
        
        # Extrair c√≥digo da URL
        import urllib.parse as urlparse
        from urllib.parse import parse_qs
        
        parsed_url = urlparse.urlparse(callback_url)
        code = parse_qs(parsed_url.query).get('code')
        
        if not code:
            print("‚ùå N√£o foi poss√≠vel extrair o c√≥digo da URL!")
            return False
        
        auth_code = code[0]
        
        # Trocar c√≥digo por token
        flow.fetch_token(code=auth_code)
        
        # Salvar credenciais
        creds = flow.credentials
        with open(GOOGLE_TOKEN_FILE, 'w') as token:
            token.write(creds.to_json())
        
        print("‚úÖ Autentica√ß√£o Google configurada com sucesso!")
        print(f"üíæ Token salvo em: {GOOGLE_TOKEN_FILE}")
        print("\nüéâ Maya HopeCann agora pode criar reuni√µes reais no Google Meet!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {str(e)}")
        return False

def test_google_auth():
    """
    Testa se a autentica√ß√£o Google est√° funcionando
    """
    try:
        if not os.path.exists(GOOGLE_TOKEN_FILE):
            print("‚ùå Token n√£o encontrado. Execute a configura√ß√£o primeiro.")
            return False
        
        print("üß™ Testando autentica√ß√£o Google...")
        
        # Carregar credenciais
        creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE)
        
        # Verificar se precisa renovar
        if creds.expired and creds.refresh_token:
            print("üîÑ Renovando token...")
            creds.refresh(Request())
            
            # Salvar token renovado
            with open(GOOGLE_TOKEN_FILE, 'w') as token:
                token.write(creds.to_json())
        
        if creds.valid:
            print("‚úÖ Autentica√ß√£o Google funcionando corretamente!")
            return True
        else:
            print("‚ùå Credenciais inv√°lidas. Reconfigure a autentica√ß√£o.")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {str(e)}")
        return False

if __name__ == '__main__':
    print("üåø Maya HopeCann - Configura√ß√£o Google OAuth2")
    print("=" * 50)
    
    while True:
        print("\nEscolha uma op√ß√£o:")
        print("1. Configurar autentica√ß√£o Google")
        print("2. Testar autentica√ß√£o existente")
        print("3. Sair")
        
        choice = input("\nOp√ß√£o (1-3): ").strip()
        
        if choice == '1':
            setup_google_auth()
        elif choice == '2':
            test_google_auth()
        elif choice == '3':
            print("üëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
