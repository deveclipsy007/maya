import os
import requests
import logging
import assemblyai as aai
from datetime import datetime
import time
import shutil
import glob
import subprocess
import re
from urllib.parse import urlparse
from dotenv import load_dotenv
# Importar nosso m√≥dulo de descriptografia WhatsApp
import whatsapp_media_decrypt

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

# Chaves de API
EVOLUTION_API_KEY = os.getenv('EVOLUTION_API_KEY')
EVOLUTION_API_URL = os.getenv('EVOLUTION_API_URL')
EVOLUTION_INSTANCE_NAME = os.getenv('EVOLUTION_INSTANCE_NAME')
ASSEMBLY_AI_API_KEY = os.getenv('ASSEMBLY_AI_API_KEY')

# Configurar AssemblyAI
if ASSEMBLY_AI_API_KEY:
    aai.settings.api_key = ASSEMBLY_AI_API_KEY

def sanitize_filename(filename):
    """
    Remove caracteres inv√°lidos para nomes de arquivo no Windows
    """
    # Caracteres proibidos no Windows: < > : " / \ | ? *
    # Tamb√©m remove par√¢metros de URL (tudo ap√≥s ?)
    if '?' in filename:
        filename = filename.split('?')[0]
    
    # Remove caracteres inv√°lidos
    sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
    
    # Remove espa√ßos extras e caracteres especiais adicionais
    sanitized = re.sub(r'[&=]', '_', sanitized)
    
    # Limita o tamanho do nome (Windows tem limite de 255 caracteres)
    if len(sanitized) > 200:
        name, ext = os.path.splitext(sanitized)
        sanitized = name[:200-len(ext)] + ext
    
    return sanitized

def find_ffmpeg_executable():
    """
    Encontra o execut√°vel do ffmpeg no sistema Windows
    """
    import shutil
    import glob
    
    # Tentar encontrar no PATH primeiro
    ffmpeg_path = shutil.which('ffmpeg')
    if ffmpeg_path:
        return ffmpeg_path
    
    # Locais comuns de instala√ß√£o do ffmpeg no Windows
    common_paths = [
        r"C:\ffmpeg\bin\ffmpeg.exe",
        r"C:\Program Files\ffmpeg\bin\ffmpeg.exe",
        r"C:\Program Files (x86)\ffmpeg\bin\ffmpeg.exe",
        os.path.expanduser(r"~\AppData\Local\Microsoft\WinGet\Packages\Gyan.FFmpeg_*\ffmpeg-*\bin\ffmpeg.exe"),
        os.path.expanduser(r"~\scoop\apps\ffmpeg\current\bin\ffmpeg.exe"),
        os.path.expanduser(r"~\chocolatey\bin\ffmpeg.exe")
    ]
    
    for path_pattern in common_paths:
        if '*' in path_pattern:
            # Usar glob para padr√µes com wildcard
            matches = glob.glob(path_pattern)
            if matches:
                return matches[0]
        else:
            if os.path.exists(path_pattern):
                return path_pattern
    
    return None

def convert_audio_with_ffmpeg(input_path):
    """
    Converte √°udio usando ffmpeg - solu√ß√£o definitiva para arquivos WhatsApp
    Converte qualquer formato de √°udio para WAV compat√≠vel com Whisper
    """
    try:
        logger.info(f"üîç Convertendo √°udio com ffmpeg: {input_path}")
        
        # Verificar se arquivo existe e tem tamanho v√°lido
        if not os.path.exists(input_path):
            logger.error(f"‚ùå Arquivo n√£o encontrado: {input_path}")
            return None
            
        file_size = os.path.getsize(input_path)
        if file_size == 0:
            logger.error(f"‚ùå Arquivo vazio: {input_path}")
            return None
        
        if file_size < 100:  # Muito pequeno para ser √°udio v√°lido
            logger.error(f"‚ùå Arquivo muito pequeno: {file_size} bytes")
            return None
            
        logger.info(f"üìä Tamanho do arquivo original: {file_size} bytes")
        
        # Encontrar ffmpeg
        ffmpeg_exe = find_ffmpeg_executable()
        if not ffmpeg_exe:
            logger.error("‚ùå ffmpeg n√£o encontrado no sistema")
            logger.info("üìù Reinicie o terminal ap√≥s instalar ffmpeg")
            return None
        
        logger.info(f"‚úÖ ffmpeg encontrado: {ffmpeg_exe}")
        
        # Gerar nome do arquivo de sa√≠da WAV
        output_path = input_path.replace('.ogg', '.wav')
        if output_path == input_path:  # Se n√£o era .ogg
            output_path = f"{os.path.splitext(input_path)[0]}.wav"
        
        # Comando ffmpeg para convers√£o robusta
        # -i: arquivo de entrada
        # -acodec pcm_s16le: codec de √°udio WAV padr√£o
        # -ar 16000: taxa de amostragem 16kHz (ideal para speech)
        # -ac 1: mono (1 canal)
        # -y: sobrescrever arquivo de sa√≠da se existir
        ffmpeg_cmd = [
            ffmpeg_exe,
            '-i', input_path,
            '-acodec', 'pcm_s16le',
            '-ar', '16000',
            '-ac', '1',
            '-y',
            output_path
        ]
        
        logger.info(f"üîÑ Executando: {' '.join(ffmpeg_cmd)}")
        
        # Executar ffmpeg
        result = subprocess.run(
            ffmpeg_cmd,
            capture_output=True,
            text=True,
            timeout=30  # Timeout de 30 segundos
        )
        
        if result.returncode != 0:
            logger.error(f"‚ùå Erro no ffmpeg: {result.stderr}")
            return None
        
        # Verificar se arquivo de sa√≠da foi criado
        if os.path.exists(output_path) and os.path.getsize(output_path) > 0:
            logger.info(f"‚úÖ Arquivo convertido com sucesso: {output_path} ({os.path.getsize(output_path)} bytes)")
            return output_path
        else:
            logger.error("‚ùå Falha na convers√£o: arquivo de sa√≠da n√£o encontrado ou vazio")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erro na convers√£o com ffmpeg: {str(e)}")
        return None

def cleanup_temp_files(file_path):
    """
    Remove arquivos tempor√°rios gerados
    """
    try:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"üßπ Arquivo tempor√°rio removido: {file_path}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao remover arquivo tempor√°rio: {str(e)}")

def transcribe_audio(audio_path):
    """
    Transcreve √°udio usando AssemblyAI
    """
    try:
        logger.info(f"üéôÔ∏è Transcrevendo √°udio: {audio_path}")
        
        # Verificar se arquivo existe e tem tamanho v√°lido
        if not os.path.exists(audio_path):
            logger.error(f"‚ùå Arquivo n√£o encontrado: {audio_path}")
            return None
            
        file_size = os.path.getsize(audio_path)
        if file_size == 0:
            logger.error(f"‚ùå Arquivo vazio: {audio_path}")
            return None
        
        # Verificar se √© um arquivo OGG v√°lido (n√£o criptografado)
        is_valid_audio = False
        try:
            with open(audio_path, 'rb') as f:
                header = f.read(4)
                
            if header.startswith(b'OggS'):
                is_valid_audio = True
                logger.info("‚úÖ Arquivo OGG v√°lido detectado")
            elif header.startswith(b'RIFF'):
                is_valid_audio = True
                logger.info("‚úÖ Arquivo WAV v√°lido detectado")
            else:
                logger.warning(f"‚ö†Ô∏è Arquivo n√£o √© OGG/WAV v√°lido - header: {header}")
                # Tentar converter mesmo assim, pode ser outro formato
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao verificar header: {str(e)}")
        
        # Converter com ffmpeg para WAV padr√£o se n√£o for WAV
        if not audio_path.lower().endswith('.wav'):
            logger.info(f"üîÑ Convertendo √°udio para WAV: {audio_path}")
            wav_path = convert_audio_with_ffmpeg(audio_path)
            
            if wav_path:
                logger.info(f"‚úÖ √Åudio convertido para WAV: {wav_path}")
                audio_path = wav_path
            else:
                logger.error("‚ùå Falha na convers√£o para WAV")
                # Continuar com o arquivo original
        
        # Transcrever com AssemblyAI
        try:
            if ASSEMBLY_AI_API_KEY:
                logger.info("üöÄ Transcrevendo com AssemblyAI...")
                
                transcriber = aai.Transcriber()
                config = aai.TranscriptionConfig(
                    language_code="pt",
                    speech_model=aai.SpeechModel.universal
                )
                
                transcript = transcriber.transcribe(audio_path, config=config)
                
                if transcript.status == aai.TranscriptStatus.completed:
                    transcribed_text = transcript.text.strip()
                    if transcribed_text:
                        logger.info(f"‚úÖ Transcri√ß√£o AssemblyAI: {transcribed_text[:100]}...")
                        return transcribed_text
                    else:
                        logger.warning("‚ö†Ô∏è AssemblyAI retornou transcri√ß√£o vazia")
                else:
                    logger.warning(f"‚ö†Ô∏è AssemblyAI falhou: {transcript.error if hasattr(transcript, 'error') else 'Sem texto'}")
            else:
                logger.warning("‚ö†Ô∏è Chave AssemblyAI n√£o configurada")
                
        except Exception as aai_error:
            logger.warning(f"‚ö†Ô∏è Erro na transcri√ß√£o AssemblyAI: {aai_error}")
        
        # Fallback: retornar mensagem de erro
        return None
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico na transcri√ß√£o: {str(e)}")
        return None

def process_audio_message(audio_message, sender_number):
    """
    Processa mensagens de √°udio recebidas via webhook
    Extrai URL e informa√ß√µes, baixa √°udio e transcreve
    """
    try:
        logger.info(f"üéµ Processando mensagem de √°udio de {sender_number}...")
        
        # Log detalhado para debug
        logger.info(f"üìì Tipo do objeto audio_message: {type(audio_message)}")
        logger.info(f"üìì Conte√∫do de audio_message: {str(audio_message)[:300]}...")
        
        # Extrair dados do √°udio com valida√ß√£o robusta
        if not audio_message:
            logger.error("‚ùå audio_message √© None ou vazio")
            return "‚ùå Formato de mensagem de √°udio inv√°lido (objeto vazio)"
            
        if not isinstance(audio_message, dict):
            logger.error(f"‚ùå audio_message n√£o √© um dicion√°rio: {type(audio_message)}")
            return "‚ùå Formato de mensagem de √°udio inv√°lido (tipo incorreto)"
            
        if 'message' not in audio_message:
            logger.error("‚ùå Chave 'message' n√£o encontrada em audio_message")
            return "‚ùå Formato de mensagem de √°udio inv√°lido (sem chave message)"
            
        if not isinstance(audio_message['message'], dict):
            logger.error(f"‚ùå audio_message['message'] n√£o √© um dicion√°rio: {type(audio_message['message'])}")
            return "‚ùå Formato de mensagem de √°udio inv√°lido (message n√£o √© dicion√°rio)"
            
        if 'audioMessage' not in audio_message['message']:
            logger.error("‚ùå Chave 'audioMessage' n√£o encontrada em message")
            return "‚ùå Formato de mensagem de √°udio inv√°lido (sem chave audioMessage)"
        
        audio_data = audio_message['message']['audioMessage']
        audio_url = audio_data.get('url', '')
        mime_type = audio_data.get('mimetype', '')
        file_length = audio_data.get('fileLength', 0)
        media_key = audio_data.get('mediaKey', '')
        
        logger.info(f"üîç Detalhes do √°udio: {mime_type}, {file_length} bytes, URL: {audio_url[:30]}...")
        
        # M√âTODO 1: Obter base64 descriptografado da Evolution API
        decrypted_audio_path = None
        try:
            if audio_url:
                instance = EVOLUTION_INSTANCE_NAME
                message_id = audio_data.get('id', '')
                
                if message_id and EVOLUTION_API_URL:
                    get_base64_url = f"{EVOLUTION_API_URL}/chat/getBase64FromMediaMessage/{instance}"
                    logger.info(f"üîë Obtendo √°udio descriptografado via getBase64: {message_id}")
                    
                    payload = {
                        "messageId": message_id
                    }
                    
                    headers = {
                        "Content-Type": "application/json",
                        "apikey": EVOLUTION_API_KEY
                    }
                    
                    response = requests.post(get_base64_url, json=payload, headers=headers, timeout=30)
                    
                    if response.status_code == 200:
                        data = response.json()
                        base64_audio = data.get('base64', '')
                        
                        if base64_audio:
                            logger.info("‚úÖ Base64 obtido com sucesso!")
                            
                            # Salvar em arquivo tempor√°rio
                            import base64
                            audio_bytes = base64.b64decode(base64_audio)
                            
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            temp_filename = f"temp_audio_{sender_number}_{timestamp}.ogg"
                            decrypted_audio_path = os.path.join(os.getcwd(), temp_filename)
                            
                            with open(decrypted_audio_path, 'wb') as f:
                                f.write(audio_bytes)
                                
                            logger.info(f"üíæ √Åudio descriptografado salvo: {decrypted_audio_path}")
                            
                            # Verificar se realmente √© um arquivo OGG v√°lido (n√£o criptografado)
                            try:
                                with open(decrypted_audio_path, 'rb') as f:
                                    header = f.read(4)
                                    
                                is_valid_ogg = header.startswith(b'OggS')
                                if not is_valid_ogg:
                                    logger.warning("‚ö†Ô∏è Arquivo n√£o √© OGG v√°lido - poss√≠vel criptografia")
                                    decrypted_audio_path = None
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è Erro ao verificar header OGG: {str(e)}")
                    else:
                        logger.warning(f"‚ö†Ô∏è Falha ao obter base64: {response.status_code} - {response.text}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro no m√©todo getBase64: {str(e)}")
        
        # M√âTODO 2: Tentar transcri√ß√£o direta com AssemblyAI
        if decrypted_audio_path:
            try:
                logger.info("üöÄ Transcrevendo com AssemblyAI SDK diretamente...")
                
                transcribed_text = transcribe_audio(decrypted_audio_path)
                
                if transcribed_text:
                    logger.info(f"‚úÖ Transcri√ß√£o AssemblyAI direta: {transcribed_text[:100]}...")
                    
                    # Limpar arquivo tempor√°rio
                    cleanup_temp_files(decrypted_audio_path)
                    
                    # Limpar poss√≠vel arquivo convertido
                    wav_path = decrypted_audio_path.replace('.ogg', '.wav')
                    cleanup_temp_files(wav_path)
                    
                    return transcribed_text
                else:
                    logger.warning("‚ö†Ô∏è Transcri√ß√£o AssemblyAI direta falhou")
                
            except Exception as aai_error:
                logger.warning(f"‚ö†Ô∏è Erro na transcri√ß√£o AssemblyAI direta: {aai_error}")
        
        # M√âTODO 3: Fallback para download direto
        if not decrypted_audio_path and audio_url:
            logger.info("üîÑ M√âTODO 3: Fallback para download direto do √°udio...")
            
            # Verificar se a URL indica arquivo criptografado (.enc)
            is_encrypted_url = audio_url.endswith('.enc')
            if is_encrypted_url:
                logger.warning("‚ö†Ô∏è URL indica arquivo criptografado (.enc)")
                if not media_key:
                    logger.error("‚ùå Arquivo criptografado sem chave de descriptografia")
                    return "‚ùå N√£o consegui processar seu √°udio (arquivo criptografado). A Evolution API deve fornecer arquivos descriptografados automaticamente."
            
            # Baixar o arquivo de √°udio
            try:
                logger.info(f"üîó Baixando √°udio da URL: {audio_url}")
                response = requests.get(audio_url, timeout=30)
                response.raise_for_status()
                
                # Salvar arquivo tempor√°rio
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                
                # Extrair extens√£o da URL sem par√¢metros de query
                parsed_url = urlparse(audio_url)
                clean_path = parsed_url.path
                file_extension = os.path.splitext(clean_path)[1]
                
                if not file_extension:
                    file_extension = '.ogg'  # Fallback para .ogg
                
                # Criar nome de arquivo seguro
                temp_filename = f"temp_audio_{sender_number}_{timestamp}{file_extension}"
                temp_filename = sanitize_filename(temp_filename)
                temp_path = os.path.join(os.getcwd(), temp_filename)
                
                try:
                    with open(temp_path, 'wb') as f:
                        f.write(response.content)
                    
                    logger.info(f"üíæ Arquivo salvo: {temp_path}")
                    
                    # Se o arquivo for criptografado (.enc), tentar descriptografar
                    if '.enc' in temp_path or '.enc?' in temp_path:
                        logger.warning("‚ö†Ô∏è Arquivo criptografado (.enc) detectado")
                        
                        # Tentar extrair mediaKey da mensagem
                        media_key = audio_message.get('message', {}).get('audioMessage', {}).get('mediaKey', '')
                        if not media_key:
                            logger.error("‚ùå Arquivo criptografado sem chave de descriptografia (mediaKey)")
                            cleanup_temp_files(temp_path)
                            return "‚ùå N√£o consegui processar seu √°udio (arquivo criptografado). A Evolution API deve fornecer arquivos descriptografados automaticamente."
                        
                        # Tentar descriptografar o √°udio
                        logger.info("üîë Tentando descriptografar arquivo de √°udio usando mediaKey...")
                        try:
                            # Extrair informa√ß√µes completas da mensagem de √°udio
                            file_sha256 = audio_message.get('message', {}).get('audioMessage', {}).get('fileSha256', '')
                            file_enc_sha256 = audio_message.get('message', {}).get('audioMessage', {}).get('fileEncSha256', '')
                            media_key_timestamp = audio_message.get('message', {}).get('audioMessage', {}).get('mediaKeyTimestamp', '')
                            
                            logger.info(f"üîç Detalhes adicionais do √°udio:")
                            logger.info(f"üîç fileSha256: {file_sha256}")
                            logger.info(f"üîç fileEncSha256: {file_enc_sha256}")
                            logger.info(f"üîç mediaKeyTimestamp: {media_key_timestamp}")
                            logger.info(f"üîç mediaKey: {media_key[:10]}... (truncado)")
                            
                            # Usar mediaKey diretamente em formato base64
                            # A mediaKey do WhatsApp √© fornecida em base64
                            logger.info("üîë Usando mediaKey em formato base64 para descriptografia...")
                            
                            # Descriptografar arquivo usando a chave base64 diretamente (MEDIA_TYPE_AUDIO = 3)
                            decrypted_path = whatsapp_media_decrypt.decrypt_media_with_base64_key(
                                temp_path, 
                                media_key, 
                                whatsapp_media_decrypt.MEDIA_TYPE_AUDIO
                            )
                            
                            if decrypted_path:
                                logger.info(f"‚úÖ √Åudio descriptografado com sucesso: {decrypted_path}")
                                # Continuar processamento com o arquivo descriptografado
                                temp_path = decrypted_path
                            else:
                                logger.error("‚ùå Falha na descriptografia do √°udio")
                                cleanup_temp_files(temp_path)
                                return "‚ùå N√£o foi poss√≠vel descriptografar o √°udio. Por favor, configure a Evolution API para fornecer arquivos descriptografados automaticamente usando webhook_base64=true."
                            
                        except Exception as decrypt_error:
                            logger.error(f"‚ùå Erro ao descriptografar √°udio: {str(decrypt_error)}")
                            cleanup_temp_files(temp_path)
                            return "‚ùå Erro interno ao descriptografar √°udio."
                    
                    transcribed_text = transcribe_audio(temp_path)
                    
                    # Limpar arquivos tempor√°rios
                    cleanup_temp_files(temp_path)
                    
                    # Limpar poss√≠vel arquivo convertido
                    wav_path = temp_path.replace(file_extension, '.wav')
                    cleanup_temp_files(wav_path)
                    
                    if not transcribed_text:
                        return "‚ùå N√£o consegui entender seu √°udio. Tente falar mais claramente ou enviar uma mensagem de texto."
                    
                    logger.info(f"‚úÖ √Åudio transcrito: {transcribed_text[:100]}...")
                    
                    # Importar m√≥dulos necess√°rios do m√≥dulo principal
                    try:
                        from maya_hopecann import generate_maya_response, conversation_context
                        import logging
                        
                        # Verificar se j√° existe hist√≥rico de conversa
                        logger.info(f"üí¨ Verificando contexto de conversa para {sender_number}...")
                        context_exists = sender_number in conversation_context and len(conversation_context[sender_number]) > 0
                        
                        if context_exists:
                            logger.info(f"‚úÖ Contexto encontrado! {len(conversation_context[sender_number])} intera√ß√µes pr√©vias.")
                        else:
                            logger.info(f"‚ö†Ô∏è Sem contexto pr√©vio para {sender_number}")
                            
                        # Verificar nome do contato se dispon√≠vel no contexto
                        contact_name = "Usu√°rio"
                        if context_exists:
                            for interaction in conversation_context[sender_number]:
                                if isinstance(interaction, dict) and 'contact_name' in interaction and interaction['contact_name'] != "Usu√°rio":
                                    contact_name = interaction['contact_name']
                                    logger.info(f"‚úÖ Nome recuperado do contexto: {contact_name}")
                                    break
                        
                        # Registrar intera√ß√£o no sistema de mem√≥ria persistente
                        if MEMORY_MANAGER_AVAILABLE:
                            try:
                                # Registrar como intera√ß√£o de √°udio
                                get_memory().record_interaction(sender_number, "whatsapp", "audio", contact_name)
                                logger.info(f"‚úÖ Intera√ß√£o de √°udio registrada na mem√≥ria persistente para {sender_number}")
                            except Exception as e:
                                logger.error(f"‚ùå Erro ao registrar intera√ß√£o de √°udio na mem√≥ria: {str(e)}")
                        
                        # Gerar resposta inteligente usando a Maya (com contexto unificado)
                        logger.info(f"üß† Gerando resposta inteligente para: '{transcribed_text[:50]}...'")
                        response = generate_maya_response(transcribed_text, sender_number, contact_name)
                        
                        # Verificar se √© a flag de controle de mensagens sequenciais
                        if response == "MENSAGENS_SEQUENCIAIS_ENVIADAS":
                            logger.info("‚úÖ Mensagens sequenciais j√° enviadas pela Maya")
                            return "" # Retornar string vazia para indicar que n√£o √© necess√°rio enviar mensagem
                        elif response:
                            logger.info(f"‚úÖ Resposta gerada: {response[:100]}...")
                            return response
                        else:
                            logger.warning("‚ö†Ô∏è Maya n√£o gerou resposta")
                            return "Desculpe, n√£o consegui processar uma resposta para seu √°udio neste momento."
                    except Exception as maya_error:
                        logger.error(f"‚ùå Erro ao gerar resposta da Maya: {str(maya_error)}")
                        # Fallback: retornar o texto transcrito
                        return f"[Transcri√ß√£o do √°udio]: {transcribed_text}\n\nDesculpe, estou com dificuldades para processar uma resposta neste momento."
                    
                except Exception as e:
                    logger.error(f"‚ùå Erro ao salvar arquivo: {str(e)}")
                    return "‚ùå Erro interno ao processar √°udio."
                
            except Exception as download_error:
                logger.error(f"‚ùå Erro ao baixar √°udio: {str(download_error)}")
                return "‚ùå N√£o consegui baixar seu √°udio. Tente enviar novamente."
        
        # Fallback geral
        return "‚ùå N√£o foi poss√≠vel processar seu √°udio. Por favor, tente enviar novamente ou envie uma mensagem de texto."
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico ao processar √°udio: {str(e)}")
        return "‚ùå Erro interno ao processar mensagem de √°udio. Por favor, tente enviar uma mensagem de texto."
