#!/usr/bin/env python3
"""
M√≥dulo de processamento de imagens para a Maya HopeCann

Este m√≥dulo gerencia o recebimento, valida√ß√£o, convers√£o e an√°lise
de imagens recebidas via WhatsApp, integrando com a API de vis√£o
computacional da OpenAI e registrando intera√ß√µes na mem√≥ria persistente.
"""

import os
import logging
import requests
import base64
import io
import time
from datetime import datetime
from PIL import Image
from openai import OpenAI
from dotenv import load_dotenv

# Importar m√≥dulo de mem√≥ria de contatos
from contact_memory import get_memory

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging espec√≠fico para este m√≥dulo
logger = logging.getLogger(__name__)

# Configura√ß√µes OpenAI
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Formatos de imagem suportados pela OpenAI Vision API
SUPPORTED_FORMATS = ['png', 'jpeg', 'jpg', 'gif', 'webp']

# Cliente OpenAI global
openai_client = None

def initialize_vision_client():
    """Inicializa o cliente OpenAI para API de vis√£o computacional"""
    global openai_client
    if not openai_client:
        openai_client = OpenAI(api_key=OPENAI_API_KEY)
        logger.info("‚úÖ Cliente OpenAI inicializado para vis√£o computacional")
    return openai_client


def download_image_from_url(image_url, headers=None):
    """
    Baixa imagem da URL fornecida pela Evolution API
    
    Args:
        image_url: URL da imagem
        headers: Headers opcionais para a requisi√ß√£o
        
    Returns:
        Conte√∫do bin√°rio da imagem ou None se falhar
    """
    try:
        if not headers:
            headers = {}
        
        logger.info(f"üì• Baixando imagem da URL: {image_url}")
        response = requests.get(image_url, headers=headers, timeout=30)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ Imagem baixada com sucesso ({len(response.content)} bytes)")
            return response.content
        else:
            logger.error(f"‚ùå Erro ao baixar imagem: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"‚ùå Exce√ß√£o ao baixar imagem: {str(e)}")
        return None


def validate_and_convert_image(image_data):
    """
    Valida e converte imagem para formato suportado pela API de vis√£o
    
    Args:
        image_data: Conte√∫do bin√°rio da imagem
        
    Returns:
        Tupla (imagem_pil, formato) ou (None, None) se inv√°lida
    """
    try:
        # Verificar se temos dados v√°lidos
        if not image_data or len(image_data) < 100:
            logger.error("‚ùå Dados de imagem muito pequenos ou vazios")
            return None, None
        
        # Tentar abrir imagem com PIL para validar
        image = Image.open(io.BytesIO(image_data))
        
        # Extrair formato e converter para min√∫sculo
        original_format = image.format.lower() if image.format else "unknown"
        logger.info(f"‚úÖ Imagem v√°lida detectada: {image.width}x{image.height} formato {original_format}")
        
        # Se formato n√£o suportado pela OpenAI, converter para JPEG
        target_format = original_format
        if original_format not in SUPPORTED_FORMATS and original_format != "unknown":
            logger.info(f"‚ö†Ô∏è Formato {original_format} n√£o suportado pela OpenAI Vision API, convertendo para JPEG")
            buffer = io.BytesIO()
            image = image.convert('RGB')  # Converter para RGB se for RGBA
            image.save(buffer, format="JPEG", quality=95)
            buffer.seek(0)
            image = Image.open(buffer)
            target_format = "jpeg"
        
        return image, target_format
    
    except Exception as e:
        logger.error(f"‚ùå Erro ao validar/converter imagem: {str(e)}")
        return None, None


def analyze_image_with_vision_api(image_data):
    """
    Analisa imagem usando a API de vis√£o computacional da OpenAI
    
    Args:
        image_data: Conte√∫do bin√°rio da imagem
        
    Returns:
        Descri√ß√£o da imagem ou mensagem de erro
    """
    try:
        # Inicializar cliente se ainda n√£o foi feito
        client = initialize_vision_client()
        
        # Validar e converter imagem se necess√°rio
        pil_image, format_name = validate_and_convert_image(image_data)
        if not pil_image:
            return "Desculpe, n√£o consegui processar esta imagem. Poderia enviar uma nova foto ou uma mensagem de texto?"
        
        # Converter imagem para base64
        buffer = io.BytesIO()
        pil_image.save(buffer, format=format_name.upper())
        buffer.seek(0)
        base64_image = base64.b64encode(buffer.read()).decode('utf-8')
        
        logger.info(f"üß† Enviando imagem para an√°lise com GPT-4o (Vis√£o)")
        
        # Chamar API de vis√£o com gpt-4o
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system", 
                    "content": """Voc√™ √© um assistente especializado em analisar imagens para a Maya HopeCann, uma assistente virtual para cannabis medicinal.
                    
Ao descrever a imagem:
1. Seja detalhado mas conciso
2. Se identificar plantas de cannabis, descreva caracter√≠sticas vis√≠veis (est√°gio de crescimento, sa√∫de, tipo)
3. Se identificar produtos de cannabis medicinal, descreva-os objetivamente
4. Se identificar pessoas, respeite a privacidade (n√£o mencione identidades)
5. Mantenha tom profissional e informativo
6. Evite julgamentos sobre legalidade
7. Foco em aspectos medicinais e terap√™uticos se relevante

Formato da resposta:
- Breve descri√ß√£o geral (1 frase)
- Detalhes relevantes (2-3 frases)
- Contexto m√©dico se aplic√°vel (1 frase)"""
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "Descreva esta imagem que recebi:"},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/{format_name};base64,{base64_image}"
                            },
                        },
                    ],
                }
            ],
            max_tokens=300,
        )
        
        # Extrair e retornar resposta
        analysis = response.choices[0].message.content
        logger.info(f"‚úÖ An√°lise de imagem conclu√≠da: {analysis[:100]}...")
        return analysis
    
    except Exception as e:
        logger.error(f"‚ùå Erro na API de vis√£o: {str(e)}")
        return "Desculpe, tive um problema ao analisar esta imagem. Poderia descrever o que ela cont√©m em uma mensagem de texto?"


def generate_maya_response_for_image(image_analysis, phone_number, contact_name):
    """
    Gera resposta personalizada da Maya para uma imagem
    
    Args:
        image_analysis: An√°lise da imagem pela API de vis√£o
        phone_number: N√∫mero de telefone do usu√°rio
        contact_name: Nome do contato
        
    Returns:
        Resposta personalizada da Maya
    """
    try:
        # Inicializar cliente se ainda n√£o foi feito
        client = initialize_vision_client()
        
        logger.info(f"üåø Gerando resposta personalizada da Maya para imagem")
        
        # Chamar API para gerar resposta personalizada
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # Modelo mais leve e eficiente
            messages=[
                {
                    "role": "system", 
                    "content": """Voc√™ √© Maya, especialista em cannabis medicinal da cl√≠nica HopeCann.

PERSONALIDADE:
- Amig√°vel, emp√°tica e profissional
- Usa linguagem acess√≠vel mas t√©cnica quando necess√°rio
- Sempre responde como m√©dica especialista
- Tom equilibrado: n√£o promocional nem alarmista
- Prioriza informa√ß√µes cientificamente validadas

RESPOSTA A IMAGENS:
- Mencione o nome da pessoa no in√≠cio da resposta
- Comente sobre o conte√∫do da imagem com base na an√°lise recebida
- Se for uma planta/produto: ofere√ßa breve contexto relevante
- Se for outro tema: tente relacionar ao contexto medicinal quando poss√≠vel
- N√£o critique nem elogie excessivamente
- NUNCA d√™ recomenda√ß√µes espec√≠ficas de tratamento pela foto

ESTRUTURA DA RESPOSTA:
- Sauda√ß√£o com nome
- Coment√°rio sobre a imagem (1-2 frases)
- Contexto informativo breve (1-2 frases)
- Pergunta de acompanhamento OU convite para agendamento se apropriado

SEMPRE FINALIZE COM UMA OP√á√ÉO DE AGENDAMENTO:
"Se quiser conversar sobre tratamentos com cannabis medicinal, posso ajudar a agendar uma consulta na HopeCann."

M√°ximo: 300 caracteres (seja concisa mas informativa)"""
                },
                {
                    "role": "user",
                    "content": f"O paciente {contact_name} enviou uma foto. An√°lise da imagem: {image_analysis}\n\nGere uma resposta personalizada da Maya:"
                }
            ],
            max_tokens=500,
        )
        
        # Extrair e retornar resposta
        maya_response = response.choices[0].message.content
        logger.info(f"‚úÖ Resposta da Maya para imagem gerada: {maya_response[:100]}...")
        return maya_response
    
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar resposta Maya para imagem: {str(e)}")
        return f"Ol√° {contact_name}! Obrigada por compartilhar esta imagem comigo. Se quiser conversar sobre tratamentos com cannabis medicinal, posso ajudar a agendar uma consulta na HopeCann."


def process_image_message(image_data, phone_number, contact_name="Paciente"):
    """
    Processa mensagem de imagem do WhatsApp, integrando com mem√≥ria persistente
    
    Args:
        image_data: Dados da mensagem de imagem do webhook
        phone_number: N√∫mero do telefone do remetente
        contact_name: Nome do contato
        
    Returns:
        Texto da resposta a ser enviada
    """
    try:
        logger.info(f"üñºÔ∏è Iniciando processamento de imagem de {contact_name} ({phone_number})")
        
        # 1. Registrar na mem√≥ria persistente antes de tudo para garantir rastreabilidade
        memory = get_memory()
        if memory:
            try:
                # Registrar contato se for novo
                memory.register_contact(phone_number, contact_name, "image")
                
                # Registrar intera√ß√£o espec√≠fica
                memory.register_interaction(
                    phone_number=phone_number,
                    channel="image",
                    direction="incoming",
                    content_type="image",
                    content_summary="Imagem recebida via WhatsApp"
                )
                logger.info(f"‚úÖ Intera√ß√£o de imagem registrada na mem√≥ria persistente")
            except Exception as e:
                logger.error(f"‚ùå Erro ao registrar na mem√≥ria persistente: {str(e)}")
        else:
            logger.warning("‚ö†Ô∏è Mem√≥ria persistente n√£o inicializada")
        
        # 2. Extrair URL da imagem
        image_url = image_data.get('url', '')
        if not image_url:
            return "Desculpe, n√£o consegui processar sua imagem. Poderia enviar novamente?"
        
        # 3. Baixar imagem
        image_binary = download_image_from_url(image_url)
        if not image_binary:
            return "N√£o foi poss√≠vel baixar a imagem. Poderia tentar enviar novamente ou em outro formato?"
        
        # 4. Analisar imagem com API de vis√£o
        image_analysis = analyze_image_with_vision_api(image_binary)
        if not image_analysis:
            return "Tive dificuldades para analisar esta imagem. Poderia descrever o que ela mostra?"
        
        # 5. Gerar resposta personalizada da Maya
        response = generate_maya_response_for_image(image_analysis, phone_number, contact_name)
        
        # 6. Registrar resposta na mem√≥ria persistente
        if memory:
            try:
                memory.register_interaction(
                    phone_number=phone_number,
                    channel="image",
                    direction="outgoing",
                    content_type="text",
                    content_summary=f"Resposta para imagem: {response[:50]}..."
                )
                logger.info(f"‚úÖ Resposta da Maya registrada na mem√≥ria persistente")
            except Exception as e:
                logger.error(f"‚ùå Erro ao registrar resposta na mem√≥ria: {str(e)}")
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar mensagem de imagem: {str(e)}")
        return f"Ol√° {contact_name}, recebi sua imagem mas tive um problema ao process√°-la. Poderia me enviar uma mensagem de texto explicando o que gostaria de saber?"


# Testes b√°sicos se executado diretamente
if __name__ == "__main__":
    # Configurar logging para testes
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    )
    
    print("üß™ Teste de processamento de imagem")
    
    # Testar com uma URL de imagem fict√≠cia
    test_image_data = {"url": "https://example.com/test.jpg"}
    test_phone = "5511999999999"
    test_name = "Tester"
    
    print(f"Simulando processamento de imagem de {test_name}...")
    print("NOTA: Este √© apenas um teste simulado, sem download real de imagem.")
    
    # Inicializar cliente OpenAI
    try:
        initialize_vision_client()
        print("‚úÖ Cliente OpenAI inicializado")
    except Exception as e:
        print(f"‚ùå Erro ao inicializar cliente OpenAI: {str(e)}")
