"""
M√≥dulo de mem√≥ria persistente para Maya HopeCann
- Rastreia intera√ß√µes de usu√°rios por n√∫mero de telefone
- Garante apresenta√ß√£o √∫nica da Maya por usu√°rio
- Funciona em todos os canais (texto/√°udio)
"""
import json
import os
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('memory_manager')

class MemoryManager:
    """
    Gerenciador de mem√≥ria persistente para Maya HopeCann
    Armazena hist√≥rico de intera√ß√µes por n√∫mero de telefone
    """
    def __init__(self, storage_path: str = "memory"):
        self.storage_path = storage_path
        self.memory_file = os.path.join(storage_path, "maya_user_memory.json")
        self.user_memory: Dict[str, Any] = {}
        self._initialize()
        
    def _initialize(self):
        """Inicializa o sistema de mem√≥ria"""
        try:
            # Criar diret√≥rio se n√£o existir
            os.makedirs(self.storage_path, exist_ok=True)
            
            # Carregar mem√≥ria do arquivo se existir
            if os.path.exists(self.memory_file):
                with open(self.memory_file, 'r', encoding='utf-8') as f:
                    self.user_memory = json.load(f)
                    logger.info(f"‚úÖ Mem√≥ria carregada: {len(self.user_memory)} contatos")
            else:
                # Criar arquivo de mem√≥ria inicial
                self.user_memory = {}
                self._save_memory()
                logger.info("üÜï Arquivo de mem√≥ria inicializado")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar mem√≥ria: {str(e)}")
            # Garantir que temos pelo menos um dicion√°rio vazio
            self.user_memory = {}
    
    def _save_memory(self):
        """Salva mem√≥ria no arquivo"""
        try:
            with open(self.memory_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_memory, f, ensure_ascii=False, indent=2)
                logger.info("üíæ Mem√≥ria salva com sucesso")
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar mem√≥ria: {str(e)}")
    
    def is_first_interaction(self, phone_number: str) -> bool:
        """
        Verifica se √© a primeira intera√ß√£o do usu√°rio
        Retorna True se for primeira intera√ß√£o, False caso contr√°rio
        """
        return phone_number not in self.user_memory
    
    def record_interaction(self, phone_number: str, channel: str = "whatsapp", 
                          message_type: str = "text", contact_name: Optional[str] = None) -> None:
        """
        Registra uma intera√ß√£o com o usu√°rio
        
        Args:
            phone_number: N√∫mero do telefone do usu√°rio
            channel: Canal de comunica√ß√£o (whatsapp, audio, etc)
            message_type: Tipo de mensagem (text, audio, image)
            contact_name: Nome do contato, se dispon√≠vel
        """
        timestamp = datetime.now().isoformat()
        
        # Se for primeira intera√ß√£o deste n√∫mero
        if phone_number not in self.user_memory:
            self.user_memory[phone_number] = {
                "first_interaction": timestamp,
                "channels": [channel],
                "contact_name": contact_name,
                "interactions": 1,
                "history": [{
                    "timestamp": timestamp,
                    "channel": channel,
                    "message_type": message_type
                }]
            }
            logger.info(f"üÜï Primeiro contato registrado para {phone_number}")
        else:
            # Atualizar informa√ß√µes de contato existente
            user_data = self.user_memory[phone_number]
            
            # Atualizar canais usados pelo usu√°rio
            if channel not in user_data["channels"]:
                user_data["channels"].append(channel)
            
            # Atualizar nome do contato se for fornecido
            if contact_name and contact_name != "Usu√°rio" and user_data.get("contact_name") in [None, "Usu√°rio"]:
                user_data["contact_name"] = contact_name
            
            # Incrementar contador de intera√ß√µes
            user_data["interactions"] = user_data.get("interactions", 0) + 1
            
            # Adicionar ao hist√≥rico (limitado a 50 √∫ltimas entradas)
            history = user_data.get("history", [])
            history.append({
                "timestamp": timestamp,
                "channel": channel,
                "message_type": message_type
            })
            
            # Manter apenas √∫ltimas 50 intera√ß√µes no hist√≥rico
            if len(history) > 50:
                history = history[-50:]
                
            user_data["history"] = history
            user_data["last_interaction"] = timestamp
            
            # Atualizar mem√≥ria
            self.user_memory[phone_number] = user_data
            logger.info(f"üîÑ Contato atualizado para {phone_number} (intera√ß√£o #{user_data['interactions']})")
        
        # Salvar altera√ß√µes
        self._save_memory()
    
    def get_user_data(self, phone_number: str) -> Dict[str, Any]:
        """
        Obt√©m dados do usu√°rio por n√∫mero de telefone
        
        Args:
            phone_number: N√∫mero do telefone do usu√°rio
            
        Returns:
            Dicion√°rio com dados do usu√°rio ou vazio se n√£o existir
        """
        return self.user_memory.get(phone_number, {})
    
    def get_all_users(self) -> Dict[str, Any]:
        """Retorna todos os usu√°rios na mem√≥ria"""
        return self.user_memory
    
    def get_total_users(self) -> int:
        """Retorna total de usu√°rios √∫nicos"""
        return len(self.user_memory)

# Singleton para mem√≥ria persistente
_memory_instance = None

def get_memory() -> MemoryManager:
    """
    Retorna inst√¢ncia √∫nica do gerenciador de mem√≥ria (Singleton)
    """
    global _memory_instance
    if _memory_instance is None:
        _memory_instance = MemoryManager()
    return _memory_instance
